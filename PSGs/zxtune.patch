diff --git a/3rdparty/gme/gme/ym2413.cpp b/3rdparty/gme/gme/ym2413.cpp
index 35d65f8f4..39cc724f3 100644
--- a/3rdparty/gme/gme/ym2413.cpp
+++ b/3rdparty/gme/gme/ym2413.cpp
@@ -1930,10 +1930,6 @@ static unsigned char OPLLRead(YM2413 *chip,int a)
 	return 0xff;
 }
 
-
-
-
-
 void * ym2413_init(int clock, int rate, int type)
 {
 	/* emulator create */
diff --git a/3rdparty/sidplayfp/builders/resid-builder/resid-emu.cpp b/3rdparty/sidplayfp/builders/resid-builder/resid-emu.cpp
index d21470748..fdd378b77 100644
--- a/3rdparty/sidplayfp/builders/resid-builder/resid-emu.cpp
+++ b/3rdparty/sidplayfp/builders/resid-builder/resid-emu.cpp
@@ -84,6 +84,7 @@ void ReSID::write(uint_least8_t addr, uint8_t data)
 {
     clock();
     m_sid.write(addr, data);
+    printf("%u-%u-%u\r\n", m_accessClk, addr, data);
 }
 
 void ReSID::clock()
diff --git a/3rdparty/sidplayfp/builders/resid-builder/resid/sid.cc b/3rdparty/sidplayfp/builders/resid-builder/resid/sid.cc
index e910ada32..317a2f2da 100644
--- a/3rdparty/sidplayfp/builders/resid-builder/resid/sid.cc
+++ b/3rdparty/sidplayfp/builders/resid-builder/resid/sid.cc
@@ -21,11 +21,15 @@
 
 #include "sid.h"
 #include <math.h>
+#include <stdio.h>
+#include <chrono>
 
 #ifndef round
 #define round(x) (x>=0.0?floor(x+0.5):ceil(x-0.5))
 #endif
 
+int global_id = 0;
+
 namespace reSID
 {
 
@@ -53,6 +57,10 @@ SID::SID()
   bus_value = 0;
   bus_value_ttl = 0;
   write_pipeline = 0;
+  
+  unique = global_id;
+  global_id++;
+  total_ticks = 0;
 }
 
 
@@ -150,6 +158,7 @@ reg8 SID::read(reg8 offset)
 // ----------------------------------------------------------------------------
 void SID::write(reg8 offset, reg8 value)
 {
+  //if(unique == 0) printf("%ld-%d-%d\n", total_ticks, offset, value);
   write_address = offset;
   bus_value = value;
   bus_value_ttl = 0x4000;
@@ -646,6 +655,7 @@ void SID::adjust_sampling_frequency(double sample_freq)
 void SID::clock(cycle_count delta_t, bool soundOutput)
 {
   int i;
+  total_ticks += delta_t;
 
   // Pipelined writes on the MOS8580.
   if (unlikely(write_pipeline) && likely(delta_t > 0)) {
diff --git a/3rdparty/sidplayfp/builders/resid-builder/resid/sid.h b/3rdparty/sidplayfp/builders/resid-builder/resid/sid.h
index fd91bd419..f4b4e9f20 100644
--- a/3rdparty/sidplayfp/builders/resid-builder/resid/sid.h
+++ b/3rdparty/sidplayfp/builders/resid-builder/resid/sid.h
@@ -113,6 +113,8 @@ public:
   ExternalFilter extfilt;
   Potentiometer potx;
   Potentiometer poty;
+  long int unique;
+  long int total_ticks;
 
   reg8 bus_value;
   cycle_count bus_value_ttl;
diff --git a/3rdparty/vgm/emu/cores/sn76496.c b/3rdparty/vgm/emu/cores/sn76496.c
index 2ca88a43a..0b0e18489 100644
--- a/3rdparty/vgm/emu/cores/sn76496.c
+++ b/3rdparty/vgm/emu/cores/sn76496.c
@@ -138,6 +138,7 @@
 #include <stdlib.h>
 #include <string.h>	// for memset()
 #include <math.h>
+#include <stdio.h>
 
 #include "../../stdtype.h"
 #include "../snddef.h"
@@ -223,6 +224,8 @@ struct _sn76496_state
 	UINT8 output[4];        // 1-bit output of each channel, pre-volume
 	INT32 cycles_to_ready;  // number of cycles until the READY line goes active
 	
+	INT64 total_cycles;
+	
 	UINT8 ready_state;
 	
 	INT32 FNumLimit;
@@ -249,6 +252,7 @@ static void sn76496_write_reg(void *chip, UINT8 offset, UINT8 data)
 {
 	sn76496_state *R = (sn76496_state*)chip;
 	UINT8 n, r, c;
+	printf("%ld-0-%d\n", (long)((double)R->total_cycles * 2 * 1000000 / ((double)R->clock / (double)R->clock_divider)), data);
 
 	// set number of cycles until READY is active; this is always one
 	// 'sample', i.e. it equals the clock divider exactly
@@ -335,6 +339,7 @@ static void sn76496_update(void* param, UINT32 samples, DEV_SMPL** outputs)
 	DEV_SMPL out2 = 0;
 	INT32 vol[4];
 	INT32 ggst[2];
+	R->total_cycles += samples;
 
 	R2 = R->NgpFlags ? R->NgpChip2 : NULL;
 	if (R->NgpFlags)
@@ -564,6 +569,7 @@ static void sn76496_reset(void *chip)
 {
 	sn76496_state *R = (sn76496_state*)chip;
 	UINT8 i;
+	R->total_cycles = 0;
 	
 	for (i = 0; i < 4; i++) R->volume[i] = 0;
 
diff --git a/src/devices/aym/src/psg.h b/src/devices/aym/src/psg.h
index d0fece5c0..d5f986e63 100644
--- a/src/devices/aym/src/psg.h
+++ b/src/devices/aym/src/psg.h
@@ -18,6 +18,7 @@ namespace Devices::AYM
 {
   class PSG
   {
+    long total_ticks = 0;
   public:
     explicit PSG(const MultiVolumeTable& table)
       : Table(table)
@@ -40,6 +41,7 @@ namespace Devices::AYM
         regs[static_cast<Registers::Index>(idx)] = 0;
       }
       SetNewData(regs);
+      total_ticks = 0;
     }
 
     void SetNewData(const Registers& data)
@@ -60,6 +62,7 @@ namespace Devices::AYM
         }
         // copy registers
         uint8_t val = data[reg];
+        printf("%ld-%d-%d\n", (long)((double)total_ticks / 218750.0 * 1000000.0), reg, val);
         const uint_t mask = 1 << reg;
         // limit values
         if (mask & REGS_4BIT_SET)
@@ -109,6 +112,7 @@ namespace Devices::AYM
 
     void Tick(uint_t ticks)
     {
+      total_ticks += ticks;
       Device.Tick(ticks);
     }
 
